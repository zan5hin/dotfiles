# ------------------------------------------------------------------
# bashrc
# ------------------------------------------------------------------

myos=`uname -s`

case "$myos" in
  Linux)
    colorflag="--color"
    ;;
  Darwin)
    colorflag="-G"
    ;;
  *)
    colorflaag=""
    ;;
esac

# source global definitions
if [ -f /etc/bashrc ]; then
  source /etc/bashrc
fi

# source my aliases file
if [ -f $HOME/.bash_aliases ]; then
  source $HOME/.bash_aliases
fi

# source my functions file
if [ -f $HOME/.bash_functions ]
then
  source $HOME/.bash_functions
fi

# setup some key bindings
if [ -f $HOME/.bash_bindkeys ]
then
  source $HOME/.bash_bindkeys
fi

# add some color
if [ -f $HOME/.bash_colors ]
then
  source $HOME/.bash_colors
fi

# add brew bash completions
if [ -f /usr/local/Library/Contributions/brew_bash_completions.sh ]
then
  source /usr/local/Library/Contributions/brew_bash_completions.sh
fi

# add tmux completions
if [ -f /usr/local/etc/bash_completions.d/tmux ]
then
  source /usr/local/etc/bash_completions.d/tmux
fi

# add git completions
if [ -f /usr/local/etc/bash_completions.d/git-completions.bash ]
then
  source /usr/local/etc/bash_completions.d/git-completions.bash
fi

# export EDITOR, PAGER, and LESS 
export VISUAL=vim
export EDITOR="$VISUAL"
export PAGER=less
export LESS="-M -n -q -i -r"

# Go path
export GOPATH=$HOME/.go
export PATH=$PATH:$GOPATH/bin

# Prefer US English and use UTF-8
export LANG="en_US.UTF-8";
export LC_ALL="en_US.UTF-8";

# Use Vi bindings
set -o vi

# allow redirection to overwrite file
unset noclobber

# umask: 002 lets group members create/modify files. outsiders can only read
umask 002

# ----------------------------------
# Build a Git aware prompt
# ---------------------------------
# Variables used in building the Git status portiion of the prompt
GIT_PROMPT_SYMBOL="${Blue}±"
GIT_PROMPT_PREFIX="${Green} [${Color_Off}"
GIT_PROMPT_SUFFIX="${Green}]${Color_Off}"
GIT_PROMPT_AHEAD="${BRed}ANUM${Color_Off}"
GIT_PROMPT_BEHIND="${Cyan}BNUM${Color_Off}"
GIT_PROMPT_MERGING="${Red}⚡︎${Color_Off}"
GIT_PROMPT_UNTRACKED="${BRed}u${Color_Off}"
GIT_PROMPT_MODIFIED="${Yellow}d${Color_Off}"
GIT_PROMPT_STAGED="${Green}s${Color_Off}"

# Show Git branch/tag, or name-rev if on detached head
function parse_git_branch() {
  (git name-rev --name-only --no-undefined --always HEAD || git symbolic-ref -q HEAD) 2> /dev/null
}

# Show different symbols as appropriate for various Git repository states
function parse_git_state() {

  # Compose this value via multiple conditional appends.
  local GIT_STATE=""

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi

  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi

  if ! git diff --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi

  if [[ -n $GIT_STATE ]]; then
    echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
  fi

}

# If inside a Git repository, print its branch and state
function git_prompt_string() {
  local git_where="$(parse_git_branch)"
  [ -n "$git_where" ] && echo "on ${Green}${git_where#(refs/heads/|tags/)}${Color_Off}$(parse_git_state)"

}

# Use Bash's prompt_command feature to show the prompt. This causes the various functions the drive the prompt
# to be evaluated each time it is displayed. Using PS1 by itself introduces stale information.
function prompt_command {
#  export PS1="\n${Green}\u${Color_Off} at ${Blue}\h${Color_Off} in ${Yellow}\w${Color_Off} $(git_prompt_string)\n$ "
  printf "\n${Green}$(id -un)${Color_Off} at ${Blue}$(hostname)${Color_Off} in ${Yellow}${PWD/#$HOME/~}${Color_Off} $(git_prompt_string)"

  _PS1_now=$(date +%s)
  PS1=$( printf "\n${Cyan}%02d:%02d:%02d${Color_Off} $ " \
    $((  ( _PS1_now - _PS1_lastcmd ) / 3600)) \
    $(( (( _PS1_now - _PS1_lastcmd ) % 3600) / 60 )) \
    $((  ( _PS1_now - _PS1_lastcmd ) % 60)) \
    )
  _PS1_lastcmd=$_PS1_now
}

# Set the completed prompt
export PROMPT_COMMAND=prompt_command

export PS1="\n$ "
_PS1_lastcmd=$(date +%s)

# configure how history works
HISTCONTROL=ignoredups                            # ignore the line if it matches previous line
HISTFILESIZE=20000                                # size of the history file cf. also shopt -s histappend
HISTSIZE=1000                                     # size of the run-time history list
HISTIGNORE=ls:ll:la:l:cd:pwd:exit:mc:su:df:clear  # do not put these in history file
HISTFILE=~/.bash_history-`hostname`               # track history by host

# export settings
export HISTCONTROL HISTFILESIZE HISTSIZE HISTIGNORE HISTFILE 

export LS_COLORS='no=00:fi=00:di=01;34:ow=01;31:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# -------------------------------------------------------------------
# Color man pages:
# -------------------------------------------------------------------
export LESS_TERMCAP_mb=$'\E[01;31m'      # begin blinking
export LESS_TERMCAP_md=$'\E[01;31m'      # begin bold
export LESS_TERMCAP_me=$'\E[0m'          # end mode
export LESS_TERMCAP_se=$'\E[0m'          # end standout-mode
export LESS_TERMCAP_so=$'\E[01;44;33m'   # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'          # end underline
export LESS_TERMCAP_us=$'\E[01;32m'      # begin underline

# finis
# mhn 2016.01.11 
